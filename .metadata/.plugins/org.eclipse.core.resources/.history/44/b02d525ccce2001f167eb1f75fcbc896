package com.restaurant.filter;

import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ResponseStatusException;
import reactor.core.publisher.Mono;

@Component
public class GatewayExceptionFilter implements GlobalFilter, Ordered {

    @Override
    public Mono<Void> filter(ServerHttpRequest request, GatewayFilterChain chain) {
        return chain.filter(request)
                .onErrorResume(error -> {
                    ServerHttpResponse response = request.getHeaders().getResponse();
                    
                    if (error instanceof ResponseStatusException) {
                        response.setStatusCode(((ResponseStatusException) error).getStatus());
                        return response.writeWith(Mono.just(response.bufferFactory()
                                .wrap(("Error: " + error.getMessage()).getBytes())));
                    }

                    response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
                    return response.writeWith(Mono.just(response.bufferFactory()
                            .wrap("Internal Server Error at API Gateway".getBytes())));
                });
    }

    @Override
    public int getOrder() {
        return -1; // High priority filter execution
    }
}
